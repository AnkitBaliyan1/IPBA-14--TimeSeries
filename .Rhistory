hw_final_h<-HoltWinters(ts_train, optim.control = 'ts_holiday')
# using ts_train to train the arima model
hw_final<-HoltWinters(ts_train)
hw_final_pred<-forecast(hw_final, length(test$date))
hw_final_h<-HoltWinters(ts_train, optim.control = 'ts_holiday')
hw_final_pred_h<-forecast(hw_final_h, length(test$date))
compare$wo_h<-hw_final_pred
compare$wo_h<-hw_final_pred$mean
compare$wo_h<-hw_final_pred$mean
compare<-data.frame('')
compare<-data.frame('')
compare$wo_h<-hw_final_pred$mean
View(compare)
compare<-data.frame()
View(compare)
accuracy(hw_final_pred, hw_final_pred_h)
accuracy(hw_final_pred$mean, hw_final_pred_h$mean)
rm(compare)
hw_final_h<-HoltWinters(ts_train, optim.control = list('ts_holiday'))
hw_final_pred_h<-forecast(hw_final_h, length(test$date))
accuracy(hw_final_pred$mean, hw_final_pred_h$mean)
list('ts_holiday')
list('ts_holiday')
list(ts_holiday)
hw_final_h<-HoltWinters(ts_train, optim.control = list(ts_holiday))
hw_final_pred_h<-forecast(hw_final_h, length(test$date))
accuracy(hw_final_pred$mean, hw_final_pred_h$mean)
hw_final_h<-hw(ts_train, optim.control = list(ts_holiday))
hw_final_h<-HoltWinters(ts_train, optim.control = list(ts_holiday))
hw_final_pred_h<-forecast(hw_final_h, length(test$date))
plot(hw_final_pred_h)
accuracy(hw_final_pred$mean, hw_final_pred_h$mean)
?xreg
?auto.arima
class(complete_holiday$holidays)
hw_final_h<-HoltWinters(ts_train, control = list(ts_holiday))
hw_final_h<-HoltWinters(ts_train, optim.control = list(ts_holiday))
hw_final_pred_h<-forecast(hw_final_h, length(test$date))
accuracy(hw_final_pred$mean, hw_final_pred_h$mean)
ar<-auto.arima(ts_train)
ar<-auto.arima(ts_train)
ar<-forecast(ar, length(test$date))
ar_h<-auto.arima(ts_train, xreg=complete_holiday))
ar_h<-auto.arima(ts_train, xreg = complete_holiday))
ar_h<-auto.arima(ts_train, xreg = complete_holiday)))
ar_h<-auto.arima(ts_train, xreg = complete_holiday)
ar_h<-auto.arima(ts_train, xreg = as.numeric(ts_holiday))
ar_h<-forecast(ar_h, length(test$date))
View(test)
test$date=as.Date(test$date, format='%d-%m-%Y')
complete_test=merge(test, complete_holiday, by='date')
View(complete_test)
View(complete_test)
ts_test_holiday<-ts(complete_test$holidays, start=c(2017,1), frequency = 365)
ar_h<-forecast(ar_h, length(test$date), xreg = as.numeric(ts_test_holiday))
accuracy(ar$mean, ar_h$mean)
ar_pred<-forecast(ar, length(test$date))
ar_h<-auto.arima(ts_train, xreg = as.numeric(ts_holiday))
ar_pred_h<-forecast(ar_h, length(test$date), xreg = as.numeric(ts_test_holiday))
accuracy(ar_pred$mean, a_pred_hh$mean)
accuracy(ar_pred$mean, a_pred_h$mean)
accuracy(ar_pred$mean, ar_pred_h$mean)
# submitting final predictions
sample_submission<-read.csv("sample_submission.csv")
submission_file<-sample_submission
submission_file$transactions<-NA
submission_file$transactions<-ar_pred_h$mean
Box.test(ar_pred_h$residuals, type='Ljung-Box')
write.csv(submission_file,
'arima_model with holidays regressor.csv',
row.names = FALSE
)
Box.test(hw_final_h$residuals, type='Ljung-Box')
# using ts_train to train the arima model
hw_final<-HoltWinters(ts_train)
hw_final_pred<-forecast(hw_final, length(test$date))
hw_final_h<-HoltWinters(ts_train, optim.control = list(ts_holiday))
hw_final_pred_h<-forecast(hw_final_h, length(test$date))
accuracy(hw_final_pred$mean, hw_final_pred_h$mean)
Box.test(hw_final_h$residuals, type='Ljung-Box')
Box.test(hw_final_pred_h$residuals, type='Ljung-Box')
Box.test(hw_final_pred$residuals, type='Ljung-Box')
Box.test(hw_final_pred_h$residuals, type='Ljung-Box')
View(complete_test)
View(test)
View(submission_file)
submission_file$hw<-hw_final_pred_h$mean
View(sample_submission)
View(submission_file)
checkresiduals(ar_h)
Box.test(ar_pred_h$residuals, type='Ljung-Box')
acf(ar_pred_h$residuals, lag=20)
plot(ar_pred_h$residuals)
hist(ar_pred_h$residuals)
hist(ar_pred_h$residuals, freq = FALSE)
# clear existing environment
#rm(list=ls(all=TRUE))
# importing library
library("tseries")
library("forecast")
library("dplyr")
library("tidyr") #-- use complete function
library("ggplot2") # to convert the ts object back to dataframe
# import data
train<-read.csv("train.csv", na.strings = "")
test<-read.csv("test.csv",na.strings = "")
holidays<-read.csv("holidays.csv", na.strings = "")
# reading date columns as.Date
train$date=as.Date(train$date, format = '%d-%m-%Y')
# understand dataset
head(train)
plot(train[,2], type='l')
colSums(is.na(train))
summary(train)
boxplot(train$transactions)
# Use complete function to find missing date
complete_train <- data.frame(complete(train, date = seq(min(train$date),
max(train$date),
by = "day")))
complete_train$date=as.Date(complete_train$date, format = '%d-%m-%Y')
class(complete_train)
# finding missing values
colSums(is.na(complete_train))
complete_train %>%
filter(is.na(transactions))
ts_train<-ts(complete_train$transactions, start=c(2013,1), frequency = 365)
plot(ts_train, type='l')
paste('Number of NA in dataset:', sum(is.na(ts_train)))
which(is.na(ts_train))
miss<-as.numeric(strsplit(as.character(which(is.na(ts_train))), split="\\."))
class(miss)
summary(ts_train)
any(is.na(ts_train))
# missing value row number:
# 2013-12-25	359
# 2014-12-25	724
# 2015-12-25	1089
# 2016-01-01	1096
# 2016-01-03	1098
# 2016-12-25	1455
for (i in miss) {
print(ts_train[i-1])
print((ts_train[i-1]+ts_train[i+1])/2)
print(ts_train[i+1])
print('next value')
ts_train[i]<-(ts_train[i-1]+ts_train[i+1])/2
}
any(is.na(ts_train))
# no NA value in the series now
# building model for future forcast
acf(ts_train)
pacf(ts_train)
adf.test(ts_train)
# using ts_train to train the arima model
hw_final<-HoltWinters(ts_train)
hw_final_pred<-forecast(hw_final, length(test$date))
plot(hw_final_pred)
# submitting final predictions
sample_submission<-read.csv("sample_submission.csv")
submission_file<-sample_submission
submission_file$transactions<-NA
submission_file$transactions<-hw_final_pred$mean
Box.test(hw_final_pred$residuals, type='Ljung-Box')
#write.csv(submission_file, 'hw_with_mean.csv', row.names = FALSE)
checkresiduals(hw_final_pred$residuals)
# forecast using prophet model
# clear existing environment
#rm(list=ls(all=TRUE))
# importing library
library("tseries")
library("forecast")
library("dplyr")
library("tidyr") #-- use complete function
library("ggplot2") # to convert the ts object back to dataframe
# importing library
library("tseries")
library("forecast")
library("dplyr")
library("tidyr") #-- use complete function
library("ggplot2") # to convert the ts object back to dataframe
train<-read.csv("train.csv", na.strings = "")
test<-read.csv("test.csv",na.strings = "")
holidays<-read.csv("holidays.csv", na.strings = "")
# reading date columns as.Date
train$date=as.Date(train$date, format = '%d-%m-%Y')
# reading date columns as.Date
train$date=as.Date(train$date, format = '%d-%m-%Y')
holidays$date=as.Date(holidays$date, format = '%d-%m-%Y')
holidays<-read.csv("holidays.csv", na.strings = "")
holidays$Date=as.Date(holidays$Date, format = '%d-%m-%Y')
# Use complete function to find missing date
complete_train <- data.frame(complete(train, date = seq(min(train$date),
max(train$date),
by = "day")))
complete_train %>% is.na(transactions)
complete_train %>% is.na(complete_train$transactions)
complete_train %>% where(is.na(complete_train$transactions))
is.na(complete_train$transactions)
select(is.na(complete_train$transactions))
filter(is.na(complete_train$transactions))
complete_train %>% filter(is.na(transactions))
which(is.na(complete_train$transactions))
miss=which(is.na(complete_train$transactions))
class(miss)
for (i in miss) {
print(ts_train[i-1])
print((ts_train[i-1]+ts_train[i+1])/2)
print(ts_train[i+1])
print('next value')
ts_train[i]<-(ts_train[i-1]+ts_train[i+1])/2
}
for (i in miss) {
complete_train$transactions[i]<-
(complete_train$transactions[i-1] + complete_train$transactions[i+1]) / 2
}
complete_train %>% filter(is.na(transactions))
colSums(is.na(complete_train))
?prophet
install.packages("prophet")
library("prophet")
library("prophet")
?prophet
# prearing data frame to use prophet forecaster
names(complete_train)<-c('df','y')
pro_mod<-prophet(complete_train)
# prearing data frame to use prophet forecaster
names(complete_train)<-c('ds','y')
pro_mod<-prophet(complete_train)
future<-make_future_dataframe(pro_mod,length(test$date))
tail(future)
tail(test)
# forecasting
yhat<-predict(pro_mod, future)
tail(yhat)
names(yhat)
tail(yhat['ds','yhat'])
tail(yhat[c('ds','yhat')])
head(yhat[c('ds','yhat')])
# ploting
dyplot.prophet(pro_mod, yhat)
prophet_plot_components(pro_mod, yhat)
# testing predictions
Box.test(pro_mod$residuals, type='Ljung-Box')
# testing predictions
Box.test(yhat$residuals, type='Ljung-Box')
# submitting final predictions
sample_submission<-read.csv("sample_submission.csv")
submission_file<-sample_submission
submission_file$transactions<-NA
submission_file$transactions<-yhat$yhat
dim(yhat$yhat)
length(yhat$yhat)
length(test$date)
View(yhat)
submission_file$transactions<-0
View(test)
yhat %>%
filter(yhat$ds>"01-01-2017") -> a
yhat %>%
filter(ds>"01-01-2017") -> a
yhat %>%
filter(ds=>"01-01-2017") -> a
yhat %>%
filter(ds>="01-01-2017") -> a
View(a)
yhat %>%
filter(ds="01-01-2017") -> a
yhat %>%
filter(ds=="01-01-2017") -> a
yhat %>%
filter(as.Date(ds)=="01-01-2017") -> a
View(yhat)
class(yhat)
class(yhat$ds)
class(as.Date(yhat$ds))
yhat %>%
filter(as.Date(ds)>="01-01-2017") -> a
yhat %>%
filter(as.Date(ds)=="01-01-2017") -> a
View(yhat)
yhat %>%
filter(as.Date(ds)=="2017-01-01") -> a
yhat %>%
filter(as.Date(ds)>="2017-01-01") -> a
yhat %>%
filter(as.Date(ds)>="2017-01-01") %>%
select(c('ds','yhat')) -> a
yhat %>%
filter(as.Date(ds)>="2017-01-01") %>%
select(c('yhat')) -> a
submission_file$transactions<-yhat %>%
filter(as.Date(ds)>="2017-01-01") %>%
select(c('yhat'))
write.csv(submission_file, 'prophet-w/o-holidays', row.names = FALSE)
write.csv(submission_file, 'prophet-w/o-holidays.csv', row.names = FALSE)
View(submission_file)
write.csv(submission_file, 'basic_prophet.csv', row.names = FALSE)
yhat %>%
filter(as.Date(ds)>="2017-01-01") %>%
select(c('yhat')) ->a
yhat %>%
filter(as.Date(ds)>="2017-01-01") %>%
select(c('ds','yhat')) ->a
View(a)
yhat %>%
filter(as.Date(ds)>="2017-01-01") %>%
select(c('ds','yhat'))[,2]
yhat %>%
filter(as.Date(ds)>="2017-01-01") %>%
select(c('ds','yhat'))
yhat %>%
filter(as.Date(ds)>="2017-01-01") %>%
select(c('yhat'))
yhat %>%
filter(as.Date(ds)>="2017-01-01") %>%
select(c('ds','yhat')) ->a
colnames(a)<-c('date','transactions')
View(a)
submission_file<-merge(submission_file, a, by='date')
View(submission_file)
View(a)
submission_file$transactions<-a$transactions
View(submission_file)
write.csv(submission_file, 'basic_prophet.csv', row.names = FALSE)
# ploting
dyplot.prophet(pro_mod, yhat)
mod1<-auto.arima(ts_train, xreg = complete_holidays$holidays)
# holiday used
# clear existing environment
#rm(list=ls(all=TRUE))
# importing library
library("tseries")
library("forecast")
library("dplyr")
library("lubridate")
library("tidyr") #-- use complete function
library("ggplot2") # to convert the ts object back to dataframe
# import data
train<-read.csv("train.csv", na.strings = "")
test<-read.csv("test.csv",na.strings = "")
holidays<-read.csv("holidays.csv", na.strings = "")
# reading date columns as.Date
train$date=as.Date(train$date, format = '%d-%m-%Y')
holidays$Date<-as.Date(holidays$Date, format = '%d-%m-%Y')
# understand dataset
head(train)
plot(train[,2], type='l')
colSums(is.na(train))
summary(train)
boxplot(train$transactions)
# Use complete function to find missing date
complete_train <- data.frame(complete(train, date = seq(min(train$date),
max(train$date),
by = "day")))
complete_train$date=as.Date(complete_train$date, format = '%d-%m-%Y')
class(complete_train)
complete_holidays <- data.frame(complete(holidays, Date = seq(min(holidays$Date),
max(holidays$Date),
by = "day")))
# finding missing values
colSums(is.na(complete_train))
complete_train %>%
filter(is.na(transactions))
colSums(is.na(complete_holidays))
complete_holidays[is.na(complete_holidays$Holidays),]
# merging complete_train and complete_holidays into one dataset
names(complete_holidays)<-c('date','holidays')
complete_train<-merge(complete_train, complete_holidays, by='date')
# treating na =0 and abrupt values =1 in holidays
complete_train$holidays<-ifelse(is.na(complete_train$holidays),
0,
ifelse(complete_train$holidays==0,
complete_train$holidays,
1))
# missing value row number:
# 2013-12-25	359
# 2014-12-25	724
# 2015-12-25	1089
# 2016-01-01	1096
# 2016-01-03	1098
# 2016-12-25	1455
complete_train %>%
filter(date=='2016-01-01') %>%
select(transactions)
complete_train %>%
filter(month(date)==01 & day(date)==03) %>%
summarise(m = mean(transactions, na.rm=TRUE))
fill_1<-complete_train %>%
filter(month(date)==01 & day(date)==01) %>%
summarise(m = mean(transactions, na.rm=TRUE))
fill_3<-complete_train %>%
filter(month(date)==01 & day(date)==03) %>%
summarise(m = mean(transactions, na.rm=TRUE))
# fill day mean for 1/1 and 1/3 in 2016 missing
complete_train$transactions<-
ifelse(complete_train$date=='2016-01-01',
as.numeric(fill_1)
,ifelse(complete_train$date=='2016-01-03',
as.numeric(fill_3)
,complete_train$transactions))
# filling 0 @12-25
complete_train$transactions<-
ifelse(is.na(complete_train$transactions),0,complete_train$transactions)
# deleting 29 feb from data
complete_train <- complete_train %>% filter(date != as.Date('2016-02-29'))
ts_train<-ts(complete_train$transactions, start=c(2013,1), frequency = 365)
plot(ts_train, type='l')
paste('Number of NA in dataset:', sum(is.na(ts_train)))
which(is.na(ts_train))
summary(ts_train)
any(is.na(ts_train))
# no NA value in the series now
# building model for future forcast
plot(decompose(ts_train))
acf(ts_train)
pacf(ts_train)
adf.test(ts_train)
# building model
mod1<-auto.arima(ts_train, xreg = complete_holidays$holidays)
hol_train<- complete_holidays[1:1460,]
mod1<-auto.arima(ts_train, xreg = hol_train$holidays)
mod1<-auto.arima(ts_train, xreg = complete_train$holidays)
View(test)
plot(mod1)
plot(ts_train)
lines(mod1$fitted)
lines(mod1$fitted, col='red')
plot(ts_train)
lines(mod1$fitted, col='red')
test$date=as.Date(test$date, format = '%d-%m-%Y')
test$holidays<- merge(test, complete_holidays, by='date')
View(test)
View(train)
test<-read.csv("test.csv",na.strings = "")
test$date=as.Date(test$date, format = '%d-%m-%Y')
View(test)
colSums(is.na(complete_holidays))
View(complete_holidays)
complete_holidays$holidays<-ifelse(is.na(complete_holidays$holidays),0,1)
View(complete_holidays)
test<- merge(test, complete_holidays, by='date')
View(test)
trans_pred<-forecast(mod1, h=length(test$id), xreg= test$holidays)
lines(trans_pred$mean)
lines(trans_pred$mean, col='blue')
lines(trans_pred$mean, col='blue')
lines(trans_pred)
lines(trans_pred$mean)
lines(trans_pred$mean,col='blue')
plot(trans_pred)
# submitting final predictions
sample_submission<-read.csv("sample_submission.csv")
submission_file<-sample_submission
submission_file$transactions<-NA
submission_file$transactions<-hw_final_pred$mean
submission_file$transactions<-trans_pred$mean
Box.test(hw_final_pred$residuals, type='Ljung-Box')
Box.test(trans_pred$residuals, type='Ljung-Box')
checkresiduals(trans_pred$residuals)
View(submission_file)
write.csv(submission_file, 'missing with holidays.csv', row.names = FALSE)
?HoltWinters
hw_mod<-HoltWinters(ts_train, xreg=test$holidays)
install.packages('forecast')
install.packages("forecast")
library(forecast)
hw_mod<-HoltWinters(ts_train, xreg=test$holidays)
library(forecast)
# Load data
data("AirPassengers")
ts_train <- window(AirPassengers, end=c(1957,12))
# Create holiday variable
holidays <- rep(0, length(ts_train))
holidays[month(ts_train)==12] <- 1
library('lubridate')
holidays[month(ts_train)==12] <- 1
holidays[month(ts_train)==12] <- 1
# Fit model with holidays as additional regression variable
model <- ets(ts_train, model="MAM", xreg=holidays)
?ets
mod_ets<-ets(ts_train,xreg=complete_train$holidays)
mod_ets<-ets(ts_train)
mod_ets<-ets(ts_train)
ets_pred<-forecast(ets_mod)
?arimax
mod_arimax<-arima(ts_train, xreg = complete_train$holidays)
mod_arimax<-arima(ts_train, xreg = complete_train$holidays)
length(ts_train)
length(complete_train$holidays)
ts_train<-ts(complete_train$transactions, start=c(2013,1), frequency = 365)
mod_arimax<-arima(ts_train, xreg = complete_train$holidays)
plot(ts_train)
lines(mod_arimax$fitted, col='red')
plot(ts_train)
lines(mod_arimax$fitted, col='red')
pred_arimax<-forecast(mod_arimax, h=length(test$id), xreg=test$holidays)
pred_arimax<-forecast(mod_arimax, h=length(test$id), xreg =  test$holidays)
pred_arimax<-forecast(mod_arimax, h=length(test$id))
pred_arimax<-forecast(mod_arimax, h=length(test$id))
View(mod_arimax)
pred_arimax<-forecast(mod_arimax, h=length(test$id), xreg=test$holidays)
pred_arimax<-forecast(mod_arimax, h=length(test$id))
pred_arimax<-forecast(mod_arimax, n.ahead=length(test$id))
pred_arimax<-forecast(mod_arimax, h = length(test$id))
pred_arimax<-forecast(mod_arimax, h = length(test$id), xreg=test$holidays)
mod_arimax<-arimax(ts_train, xreg = complete_train$holidays)
mod_arimax<-arima(ts_train, xreg = complete_train$holidays)
pred_arimax<-forecast(mod_arimax)
pred_arimax<-forecast(mod_arimax, h = length(test$id))
for (i in miss) {
ts_train[i]<-(ts_train[i-1]+ts_train[i+1])/2
}
