colSums(is.na(train))
summary(train)
boxplot(train$transactions)
# Use complete function to find missing date
complete_train <- complete(train, date = seq(min(train$date),
max(train$date),
by = "day"))
# finding missing values
colSums(is.na(complete_train))
complete_train %>%
filter(is.na(transactions))
ts_train<-ts(complete_train$transactions, start=c(2013,1), frequency = 365)
plot(ts_train, type='l')
paste('Number of NA in dataset:', sum(is.na(ts_train)))
fill_miss<- function(loc){
till_loc<-ts_train[1:loc-1]
till_loc_ts<-ts(till_loc, start=c(2013,1), frequency=365) # to get the plot
# with time reference
# building model and forcasting
mod<- auto.arima(till_loc_ts)
val_fill<-forecast(mod,1)
# plot
plot(till_loc_ts, type='l')
lines(mod$fitted, col='yellow')
lines(val_fill$mean, col='red')
return(val_fill$mean)
}
which(is.na(ts_train))
miss<-as.numeric(strsplit(as.character(which(is.na(ts_train))), split="\\."))
miss
complete_train %>%
group_by(year(date)) %>%
summarise(mean(transactions, na.rm=TRUE))-> mean_table
for (i in miss) {
print(ts_train[i-1])
print((ts_train[i-1]+ts_train[i+1])/2)
print(ts_train[i+1])
print('next value')
}
miss
miss[[1]]
miss[[3]]
year(complete_train[359,'date'])
year(complete_train[359,1])
year(complete_train$date)
year(complete_train$date)[2,]
year(complete_train$date)[2]
complete_train %>%
group_by(year(date)) %>%
summarise(mean(transactions, na.rm=TRUE))-> mean_table
mean_table[1]
mean_table[1,2]
mean_table
na_fill<- function(index){
for (yr in mean_table$`year(date)`){
if mean_table[[yr]]==year(complete_train$date[i])
names(mean_table)<-c('year','mean')
mean_table
na_fill<- function(index){
for (yr in mean_table$year){
if mean_table[[yr]]==year(complete_train$date[i])
na_fill<- function(index){
for (yr in mean_table$year){
if mean_table[[yr]]==year(complete_train$date[i]){
na_fill<- function(index){
for (yr in mean_table$year){
if (mean_table[[yr]]==year(complete_train$date[i])){
return(mean_table[yr,2])
}
}
}
na_fill<- function(index){
for (yr in mean_table$year){
if (mean_table[[yr]]==year(complete_train$date[index])){
return(mean_table[yr,2])
}
}
}
na_fill(5)
na_fill(2)
na_fill<- function(index){
for (y in mean_table$year){
print(yr)
}
}
na_fill(2)
na_fill<- function(index){
for (y in mean_table$year){
print(y)
}
}
na_fill(2)
print(index)
na_fill<- function(index){
for (y in mean_table$year){
print(y)
print(index)
}
}
na_fill(2)
mean_table[[3]]
mean_table[3,1]
na_fill<- function(index){
for (y in mean_table$year){
if (mean_table[y,1]==year(complete_train$date[index])){
return(mean_table[y,2])
}
}
}
na_fill(2)
year(complete_train$date[54])
mean_table[1,1]
class(mean_table)
data.frame(complete_train %>%
group_by(year(date)) %>%
summarise(mean(transactions, na.rm=TRUE)))-> mean_table
names(mean_table)<-c('year','mean')
class(mean_table)
na_fill<- function(index){
for (y in mean_table$year){
if (mean_table[y,1]==year(complete_train$date[index])){
return(mean_table[y,2])
}
}
}
na_fill(2)
na_fill<- function(index){
for (y in mean_table$year){
print(y)
}
}
na_fill(2)
na_fill<- function(index){
for (y in mean_table$year){
if (y== year(complete_train$date[index])){
return(mean_table[y,2])
}
}
}
na_fill(2)
na_fill<- function(index){
for (y in length(mean_table$year)){
if (mean_table[y,1] == year(complete_train$date[index])){
return(mean_table[y,2])
}
}
}
na_fill(2)
print(na_fill(2))
na_fill<- function(index){
for (y in length(mean_table$year)){
if (mean_table[y,1] == year(complete_train$date[index])){
print(mean_table[y,2])
return(mean_table[y,2])
}
}
}
na_fill(4)
complete_train$date[4]
year(complete_train$date[4])
mean_table[3,1]
na_fill<- function(index){
for (y in length(mean_table$year)){
if (mean_table[y,1] == year(complete_train$date[index])){
print(mean_table[y,2])
return(mean_table[y,2])
}
}
}
na_fill(4)
na_fill<- function(index){
for (y in length(mean_table$year)){
if (mean_table[y,1] == year(complete_train$date[index])){
print(mean_table[y,2])
}
}
}
na_fill(4)
na_fill<- function(index){
for (y in length(mean_table$year)){
if (mean_table[y,1] == year(complete_train$date[index])){
print(mean_table[y,2])
}
return(mean_table[y,2])
}
}
na_fill(4)
year(complete_train$date[4])
mean_table[1,1]
mean_table[1,2]
mean_table
na_fill(4)
na_fill(6)
na_fill(1)
if (mean_table[y,1] == year(complete_train$date[index])){
print(mean_table[y,2])
return(mean_table[y,2])
}
na_fill<- function(index){
for (y in length(mean_table$year)){
if (mean_table[y,1] == year(complete_train$date[index])){
print(mean_table[y,2])
return(mean_table[y,2])
}
}
}
na_fill(1)
na_fill<- function(index){
for (y in length(mean_table$year)){
print(y)
}
}
na_fill(1)
na_fill(15)
na_fill<- function(index){
for (y in length(mean_table$year)){
paste(y)
}
}
na_fill(15)
na_fill<- function(index){
for (y in length(mean_table$year)){
print(y)
}
}
na_fill(15)
length(mean_table$year)
na_fill<- function(index){
for (y in seq(1:length(mean_table$year))){
print(y)
}
}
na_fill(15)
na_fill<- function(index){
for (y in seq(1:length(mean_table$year))){
if (mean_table[y,1] == year(complete_train$date[index])){
print(mean_table[y,2])
return(mean_table[y,2])
}
}
}
na_fill(1)
na_fill<- function(index){
for (y in seq(1:length(mean_table$year))){
if (mean_table[y,1] == year(complete_train$date[index])){
return(mean_table[y,2])
}
}
}
na_fill(1)
na_fill(365)
na_fill(366)
data.frame(complete_train %>%
group_by(year(date)) %>%
summarise(mean(transactions, na.rm=TRUE)))-> mean_table
names(mean_table)<-c('year','mean')
na_fill<- function(index){
for (y in seq(1:length(mean_table$year))){
if (mean_table[y,1] == year(complete_train$date[index])){
return(mean_table[y,2])
}
}
}
for (i in miss) {
print(ts_train[i-1])
na_fill(i)
print(ts_train[i+1])
print('next value')
}
for (i in miss) {
paste("i-1",ts_train[i-1])
paste('i',na_fill(i))
paste('i+1',ts_train[i+1]))
for (i in miss) {
paste("i-1",ts_train[i-1])
paste('i',na_fill(i))
paste('i+1',ts_train[i+1])
print('next value')
}
for (i in miss) {
print("i-1",ts_train[i-1])
paste('i',na_fill(i))
paste('i+1',ts_train[i+1])
print('next value')
}
for (i in miss) {
paste('i-1')
print(ts_train[i-1])
na_fill(i)
print(ts_train[i+1])
print('next value')
}
for (i in miss) {
paste('i-1')
print(ts_train[i-1])
print(na_fill(i))
print(ts_train[i+1])
print('next value')
}
mean_table
for (i in miss) {
paste('i-1')
print(ts_train[i-1])
print(na_fill(i))
print(ts_train[i+1])
print('next value',i)
}
for (i in miss) {
paste('i-1')
print(ts_train[i-1])
print(na_fill(i))
print(ts_train[i+1])
paste('next value',i)
}
for (i in miss) {
paste('i-1')
print(ts_train[i-1])
print(na_fill(i))
print(ts_train[i+1])
print('next value')
}
mean_table
# clear existing environment
#rm(list=ls(all=TRUE))
# importing library
library("tseries")
library("forecast")
library("dplyr")
library("tidyr") #-- use complete function
library("ggplot2") # to convert the ts object back to dataframe
# import data
train<-read.csv("train.csv", na.strings = "")
test<-read.csv("test.csv",na.strings = "")
holidays<-read.csv("holidays.csv", na.strings = "")
# reading date columns as.Date
train$date=as.Date(train$date, format = '%d-%m-%Y')
# understand dataset
head(train)
plot(train[,2], type='l')
colSums(is.na(train))
summary(train)
boxplot(train$transactions)
# Use complete function to find missing date
complete_train <- data.frame(complete(train, date = seq(min(train$date),
max(train$date),
by = "day")))
complete_train$date=as.Date(complete_train$date, format = '%d-%m-%Y')
class(complete_train)
# finding missing values
colSums(is.na(complete_train))
complete_train %>%
filter(is.na(transactions))
ts_train<-ts(complete_train$transactions, start=c(2013,1), frequency = 365)
plot(ts_train, type='l')
paste('Number of NA in dataset:', sum(is.na(ts_train)))
fill_miss<- function(loc){
till_loc<-ts_train[1:loc-1]
till_loc_ts<-ts(till_loc, start=c(2013,1), frequency=365) # to get the plot
# with time reference
# building model and forcasting
mod<- auto.arima(till_loc_ts)
val_fill<-forecast(mod,1)
# plot
plot(till_loc_ts, type='l')
lines(mod$fitted, col='yellow')
lines(val_fill$mean, col='red')
return(val_fill$mean)
}
which(is.na(ts_train))
miss<-as.numeric(strsplit(as.character(which(is.na(ts_train))), split="\\."))
class(miss)
data.frame(complete_train %>%
group_by(year(date)) %>%
summarise(mean(transactions, na.rm=TRUE)))-> mean_table
names(mean_table)<-c('year','mean')
na_fill<- function(index){
for (y in seq(1:length(mean_table$year))){
if (mean_table[y,1] == year(complete_train$date[index])){
return(mean_table[y,2])
}
}
}
for (i in miss) {
ts_train[i]<-na_fill(i)
}
any(is.na(ts_train))
# clear existing environment
rm(list=ls(all=TRUE))
# importing library
library("tseries")
library("forecast")
library("dplyr")
library("tidyr") #-- use complete function
library("ggplot2") # to convert the ts object back to dataframe
# import data
train<-read.csv("train.csv", na.strings = "")
test<-read.csv("test.csv",na.strings = "")
holidays<-read.csv("holidays.csv", na.strings = "")
# reading date columns as.Date
train$date=as.Date(train$date, format = '%d-%m-%Y')
# understand dataset
head(train)
plot(train[,2], type='l')
colSums(is.na(train))
summary(train)
boxplot(train$transactions)
# Use complete function to find missing date
complete_train <- data.frame(complete(train, date = seq(min(train$date),
max(train$date),
by = "day")))
complete_train$date=as.Date(complete_train$date, format = '%d-%m-%Y')
class(complete_train)
# finding missing values
colSums(is.na(complete_train))
complete_train %>%
filter(is.na(transactions))
ts_train<-ts(complete_train$transactions, start=c(2013,1), frequency = 365)
plot(ts_train, type='l')
paste('Number of NA in dataset:', sum(is.na(ts_train)))
data.frame(complete_train %>%
group_by(year(date)) %>%
summarise(mean(transactions, na.rm=TRUE)))-> mean_table
names(mean_table)<-c('year','mean')
na_fill<- function(index){
for (y in seq(1:length(mean_table$year))){
if (mean_table[y,1] == year(complete_train$date[index])){
return(mean_table[y,2])
}
}
}
for (i in miss) {
ts_train[i]<-na_fill(i)
}
miss<-as.numeric(strsplit(as.character(which(is.na(ts_train))), split="\\."))
for (i in miss) {
ts_train[i]<-na_fill(i)
}
any(is.na(ts_train))
# building model for future forcast
acf(ts_train)
pacf(ts_train)
adf.test(ts_train)
# using ts_train to train the arima model
hw_final<-HoltWinters(ts_train)
# clear existing environment
rm(list=ls(all=TRUE))
# importing library
library("tseries")
library("forecast")
library("dplyr")
library("tidyr") #-- use complete function
library("ggplot2") # to convert the ts object back to dataframe
# import data
train<-read.csv("train.csv", na.strings = "")
test<-read.csv("test.csv",na.strings = "")
holidays<-read.csv("holidays.csv", na.strings = "")
# reading date columns as.Date
train$date=as.Date(train$date, format = '%d-%m-%Y')
# understand dataset
head(train)
plot(train[,2], type='l')
colSums(is.na(train))
summary(train)
boxplot(train$transactions)
# Use complete function to find missing date
complete_train <- data.frame(complete(train, date = seq(min(train$date),
max(train$date),
by = "day")))
complete_train$date=as.Date(complete_train$date, format = '%d-%m-%Y')
class(complete_train)
# finding missing values
colSums(is.na(complete_train))
complete_train %>%
filter(is.na(transactions))
ts_train<-ts(complete_train$transactions, start=c(2013,1), frequency = 365)
plot(ts_train, type='l')
paste('Number of NA in dataset:', sum(is.na(ts_train)))
miss<-as.numeric(strsplit(as.character(which(is.na(ts_train))), split="\\."))
data.frame(complete_train %>%
group_by(year(date)) %>%
summarise(mean(transactions, na.rm=TRUE)))-> mean_table
names(mean_table)<-c('year','mean')
na_fill<- function(index){
for (y in seq(1:length(mean_table$year))){
if (mean_table[y,1] == year(complete_train$date[index])){
return(mean_table[y,2])
}
}
}
for (i in miss) {
ts_train[i]<-na_fill(i)
}
any(is.na(ts_train))
# no NA value in the series now
# building model for future forcast
acf(ts_train)
pacf(ts_train)
adf.test(ts_train)
# using ts_train to train the arima model
hw_final<-HoltWinters(ts_train)
hw_final_pred<-forecast(hw_final, length(test$date))
plot(hw_final_pred)
# submitting final predictions
sample_submission<-read.csv("sample_submission.csv")
submission_file<-sample_submission
submission_file$transactions<-NA
submission_file$transactions<-hw_final_pred$mean
#write.csv(submission_file, 'hw & yearly_mean_at_na', row.names = FALSE)
write.csv(submission_file, 'hw & yearly_mean_at_na', row.names = FALSE)
getwd()
write.csv(submission_file, 'hw & yearly_mean_at_na.csv', row.names = FALSE)
Box.test(hw_final_pred$residuals, type='Ljung-Box')
